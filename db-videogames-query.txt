-- ---------------------------------SELECT----------------------------------------------------------


-- 1- Selezionare tutte le software house americane (3)
select *
from software_houses sh 
where sh.country = 'United States';


-- 2- Selezionare tutti i giocatori della città di 'Rogahnland' (2)

select  *
from players p  
where p.city  = 'Rogahnland';

-- 3- Selezionare tutti i giocatori il cui nome finisce per "a" (220)
select  *
from players p  
where p.name  like '%a';


-- 4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)
select *
from reviews r 
where r.player_id  = 800;


-- 5- Contare quanti tornei ci sono stati nell'anno 2015 (9)
select year, count(id) 'num_tournaments'  
from tournaments t 
where t.`year` = 2015;


-- 6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)
select *
from awards a 
where a.description  like '%facere%';

-- 7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)
select v.id  
from videogames v
join category_videogame cv on cv.videogame_id = v.id
where cv.category_id in (2, 6)
group by v.id


-- 8- Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)
select *
from reviews r 
where r.rating between 2 and 4


-- 9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)
select *
from  videogames v 
where year(release_date) = 2020;


-- 10- Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da 5 stelle, mostrandoli una sola volta (443)
select  distinct v.id 
from videogames v
join reviews r on r.videogame_id = v.id 
where r.rating >= 5;

-- ******************BONUS***********************

-- 11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3.16 circa)
select count(r.id), avg(r.rating) 
from reviews r 
where r.videogame_id  = 412;

-- 12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)
select count(v.id) 
from videogames v 
where v.software_house_id = 1 and year(v.release_date) = 2018; 



-- ---------------------------------GROUP BY----------------------------------------------------------

-- 1- Contare quante software house ci sono per ogni paese (3)
select sh.country , count(sh.id) 
from software_houses sh 
group by country 


-- 2- Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)
select r.videogame_id , count(r.id) as 'num_reviews'
from reviews r 
group by r.videogame_id;


-- 3- Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)
select plv.pegi_label_id , count(plv.videogame_id) as videogames_num
from pegi_label_videogame plv
group by plv.pegi_label_id 


-- 4- Mostrare il numero di videogiochi rilasciati ogni anno (11)
select year(v.release_date) as 'year', count(v.id) as 'num_videogames'
from videogames v 
group by year(v.release_date);


-- 5- Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)
select dv.device_id as 'type_device', count(dv.device_id) as 'num_videogames'
from device_videogame dv 
group by dv.device_id 


-- 6- Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)
select r.videogame_id , avg(r.rating) 
from reviews r 
group by r.videogame_id 
order by avg(r.rating) desc;




-- --------------------------------------JOIN--------------------------------------------

-- 1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)
select distinct p.id
from players p 
join reviews r on p.id = r.player_id 


-- 2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)
select distinct v.id 
from videogames v 
join tournament_videogame tv on v.id = tv.videogame_id 
join tournaments t on tv.tournament_id = t.id 
where t.`year`  = 2016;


-- 3- Mostrare le categorie di ogni videogioco (1718)
select v.id as 'id_games' , c.name as 'category'
from categories c 
join category_videogame cv on c.id = cv.category_id 
join videogames v on cv.videogame_id = v.id 


-- 4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)
select distinct sh.id as 'software_house_id', count(v.id) as 'num_videogames'
from software_houses sh 
join videogames v on sh.id = v.software_house_id 
where year(v.release_date) > 2020
group by sh.id;


-- 5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)
select sh.name as 'software_house' , a.name "award", av.`year` 
from software_houses sh 
join videogames v on sh.id = v.software_house_id 
join award_videogame av on v.id = av.videogame_id 
join awards a on av.award_id = a.id 


-- 6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)
select distinct v.id as 'videogame_id', c.name as 'category' , pl.name as "PEGI" 
from videogames v
join category_videogame cv on v.id = cv.videogame_id 
join categories c on cv.category_id = c.id 
join pegi_label_videogame plv on v.id = plv.videogame_id 
join pegi_labels pl on plv.pegi_label_id = pl.id 
join reviews r on v.id = r.videogame_id 
where r.rating >= 4


-- 7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)
select distinct v.id  
from tournaments t 
join player_tournament pt on t.id = pt.tournament_id 
join players p on pt.player_id = p.id 
join tournament_videogame tv on t.id = tv.tournament_id 
join videogames v on tv.videogame_id = v.id 
where p.name like "S%"


-- 8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)
select  t.city 
from tournaments t 
join tournament_videogame tv on t.id = tv.tournament_id  
join videogames v on v.id = tv.videogame_id 
join award_videogame av on v.id = av.videogame_id 
join awards a on av.award_id = a.id 
where av.award_id  = 1 and av.`year` = 2018



-- 9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)
select p.*
from players p 
join player_tournament pt on pt.player_id = p.id 
join tournaments t on t.id =pt.tournament_id
join tournament_videogame tv on tv.tournament_id = t.id
join videogames v on v.id = tv.videogame_id 
join award_videogame av on av.videogame_id = v.id 
join awards a on a.id = av.award_id
where av.`year` = '2018'
and av.award_id = 5
and t.`year` = 2019



-- ***********************BONUS**********************************

-- 10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)
select v.release_date , sh.*
from videogames v
join software_houses sh on sh.id = v.software_house_id 
group by v.id 
order by v.release_date asc 
limit 1

-- 11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)
select count(*)as total_reviews, v.*
from videogames v
join reviews r on r.videogame_id = v.id 
group by r.videogame_id 
order by total_reviews desc 
limit 1

-- 12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)
select count(a.id) as num_award , sh.* 
from software_houses sh
join videogames v on v.software_house_id = sh.id 
join award_videogame av on av.videogame_id = v.id 
join awards a on a.id = av.award_id
where av.`year` between 2015 and 2016
group by sh.id, sh.name 
order by count(a.id) desc
limit 1





